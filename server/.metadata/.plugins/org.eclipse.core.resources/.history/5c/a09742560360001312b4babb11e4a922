package com.example.finalprj;

// import java network file
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketException;
import java.net.UnknownHostException;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {

	final int ackTimeout = 2000;
	
	Button btn1,btn2,btn3;
	EditText txt;
	TextView txtv;
	RadioGroup gameBoard;
	ListView lv;
	boolean IsLogin = false;
	
	InetAddress serverAddr; 
	Socket socket = null;
	byte[] buf = new byte[1024];
	AliveThread alivethread = null; 
	ArrayAdapter<String> adapter;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		btn1 = (Button) findViewById(R.id.ConnectBtn);
		btn2 = (Button) findViewById(R.id.button1);
		btn3 = (Button) findViewById(R.id.button2);
		txt = (EditText) findViewById(R.id.MsgTxt);
		txtv = (TextView) findViewById(R.id.msg);
		lv = (ListView) findViewById(R.id.listView1);
		adapter = new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1);
		
		IsLogin = false;
		SetLoginEnable(IsLogin);
		
		btn1.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				
				IsLogin = true;
				SetLoginEnable(IsLogin);
				new SocketSend().execute(txt.getText().toString(),"login");
				
			}
		});
		
		 btn2.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				
				IsLogin = false;
				SetLoginEnable(IsLogin);
				// TODO Auto-generated method stub
				new SocketSend().execute(txt.getText().toString(),"logout");
				
			}
		});
		 
		 btn3.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
			/*	Intent i = new Intent();
				Bundle b = new Bundle();
				
				i.setClass(MainActivity.this, GameActivity.class);
				startActivity(i);
				MainActivity.this.finish();*/
			}
		});
		 
		 lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
 			public void onItemClick(AdapterView arg0,View arg1,int arg2,long arg3){
 				ListView listview = (ListView) arg0;
 				final String Suser = listview.getItemAtPosition(arg2).toString();
 				//listview.setClickable(true);
 				new AlertDialog.Builder(MainActivity.this).setTitle("挑戰玩家").setMessage("玩家: "+Suser).setPositiveButton("挑戰!", new DialogInterface.OnClickListener() {
						
						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							//new ChallengeSend().execute(user,Suser);
							
							new SocketSend().execute(txt.getText().toString(),"challenage",Suser);
							
						}
					}).setNegativeButton("取消", new DialogInterface.OnClickListener() {
						
						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							
						}
					}).show();
 			}
			});
		 
	}
	
	private void SetLoginEnable(boolean set){
		findViewById(R.id.ConnectBtn).setEnabled(!set);
		findViewById(R.id.button1).setEnabled(set);
		findViewById(R.id.MsgTxt).setEnabled(!set);
		findViewById(R.id.listView1).setEnabled(set);
	}
	
	private class SocketSend extends AsyncTask<String, Void, Void> {
		byte[] sentbuf= new byte[1024];
		byte[] revbuf= new byte[1024];
		SocketAddress dstEP; 
		InetAddress  dstIP;
		Socket socket = null;
		
		final int dstPort = 30001;
		String type;
		String user;
		@Override
        protected void onPreExecute() {
			super.onPreExecute();
        	try{
        		dstIP = InetAddress.getByName("192.168.0.3");
        		dstEP = new InetSocketAddress(dstIP,dstPort);
        	}
        	catch(UnknownHostException e){
        		txtv.setText(e.toString());
        	}
		}
		
        @Override
        protected Void doInBackground(String... params) {
        	type = params[1];
        	user = params[0];
        	//txtv1.setText(type);
        	
	        try{
				socket = new Socket();
						
				socket.connect(dstEP,2000);
						
				OutputStream out = null;
				InputStream in = null;
						
				out = socket.getOutputStream();
				in = socket.getInputStream();
				
				String TransStr = "";
				
				if(type == "login"){
					TransStr = "s:"+user;
	        	}else if(type == "logout"){
	        		TransStr = "o:"+user;
	        	}else if(type == "ack"){
	        		TransStr = "ack:"+user;
	        	}else if(type == "challenage"){
	        		TransStr = "ch:"+user+":"+params[2];
	        	}else if(type == "fight"){
	        		TransStr = "f:"+user+":"+params[2];
	        	}
				
				System.arraycopy(TransStr.getBytes(), 0, sentbuf, 0, TransStr.length());
						
				out.write(sentbuf);
				revbuf = new byte[1024];
				in.read(revbuf);
				socket.close();
					
	        }catch(SocketException e){
	        	txtv.setText(e.toString());
	        }catch(IOException e){
	        	txtv.setText(e.toString());
	        }
	        return null;
        }        

        @Override
        protected void onPostExecute(Void unused) {
        	
        	if(type == "login"){
        		String[] cmd = new String(revbuf).split(":");
        		if(cmd[0] == "e" && cmd[1] == "r" ){
	        		txtv.setText("Name Reserved !");
        		}else{
        			//txtv.setText(new String(revbuf));
	        		if(alivethread == null){
	        			alivethread = new AliveThread();
	        			alivethread.start();
	        		}
        		}
        		
        	}else if(type == "logout"){
        		String[] cmd = new String(revbuf).split(":");
        		if(cmd[0] == "e" && cmd[1] == "nf"){
        			//txtv.setText("Not found");
        		}else{
        			if(alivethread != null){
        				alivethread.flag = false;
        				alivethread.interrupt();
        				alivethread = null;
        			}
        		}
        	}else if(type == "ack"){
        		final String[] cmd = new String(revbuf).split(":");
        	//	txtv.setText(new String(cmd[1]));
        		
        		adapter.clear();
        		
        		for(int i=6;i<cmd.length;i++)
        			adapter.add(cmd[i]);
        		
        		lv.setAdapter(adapter);
        		
        		if(cmd[1].equals(new String("y"))){
        		//	Toast.makeText(MainActivity.this, cmd[2], Toast.LENGTH_SHORT).show();
        			new AlertDialog.Builder(MainActivity.this).setTitle("有玩家挑戰你").setMessage("玩家: "+cmd[2]).setPositiveButton("挑戰!", new DialogInterface.OnClickListener() {
						
						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							//new ChallengeSend().execute(user,Suser);
							
							new SocketSend().execute(txt.getText().toString(),"fight",cmd[2]);
							
						}
					}).setNegativeButton("取消", new DialogInterface.OnClickListener() {
						
						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							
						}
					}).show();
        		}
        		if(cmd[3].equals(new String("y"))){
        			alivethread.flag = false;
    				alivethread.interrupt();
    				alivethread = null;
        			
        			
        			//fight
        			Intent i = new Intent();
    				Bundle b = new Bundle();
    				b.putString("_USER", txt.getText().toString());
    				b.putString("_FIGHT_NAME", cmd[4]);
    				b.putString("_GAMD_ID", cmd[5]);
    				i.putExtras(b);
    				i.setClass(MainActivity.this, GameActivity.class);
    				startActivity(i);
    				MainActivity.this.finish();
        		}
        		
        	}else if(type == "challenge"){
        		
        	}else if(type == "fight"){
        		
        	}
        	
        }
    }
	
	
	
	private class AliveThread extends Thread{
		
		boolean flag = true;
		
		@Override
		public void run(){
			while(flag){
				new SocketSend().execute(txt.getText().toString(),"ack");
					
				try{
					Thread.sleep(ackTimeout);
				}catch(Exception e){
					e.printStackTrace();
				}
			}
		}
	}
	
	
	
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

}
